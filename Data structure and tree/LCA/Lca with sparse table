#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long

const int N = 1e5+5;
const int k = 18;

int L[N];
int par[N];
vector<int> g[N];
int table[N][k];

void dfs(int x, int p = 1 , int d = 0){
    L[x] = d;
    par[x] = p;
    for(auto y : g[x]){
        if(p == y)continue;
        dfs(y,x,d+1);
    }
}

void lca_init(int n){
    memset(table , -1 , sizeof table);
    for(int i=1;i<=n;i++){
        table[i][0] = par[i];
    }

    for(int j=1;(1<<j)<=n;j++){
        for(int i=1;i<=n;i++){
            if(table[i][j-1] != -1){
                table[i][j] = table[table[i][j-1]][j-1];
            }
        }
    }
}

int get_lca(int p , int q){
    if(L[p] < L[q]){
        swap(p , q);
    }

    int log = 1;
    while(1){
        int next = log+1;
        if((1<<next) > L[p])break;
        log++;
    }

    for(int i=log;i>=0;i--){
        if(L[p]-(1<<i) >= L[q]){
            p = table[p][i];
        }
    }

    if(p == q){
        return p;
    }

    for(int i=log;i>=0;i--){
        if(table[p][i] != -1 and table[p][i] != table[q][i]){
            p = table[p][i];
            q = table[q][i];
        }
    }

    return par[p];
}

signed solve(){

    int n;
    cin>>n;
    for(int i=1;i<n;i++){
        int x,y;
        cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    dfs(1);
    lca_init(n);

    int q;
    cin>>q;
    while(q--){
        int x,y;cin>>x>>y;
        cout<<get_lca(x,y)<<endl;
    }

    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();return 0;
}
