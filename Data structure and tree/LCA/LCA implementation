#include <bits/stdc++.h>
using namespace std;

//debug..........
#define error(args...) {vector<string>_v=split(#args,',');err(_v.begin(),args);cout<<endl;}
vector<string> split(const string &s, char c) {vector<string>v; stringstream ss(s); string x;while (getline(ss, x, c))v.emplace_back(x); return move(v);} void err(vector<string>::iterator it) {}
template<typename T, typename... Args>void err(vector<string>::iterator it, T a, Args...args) {cout << it->substr((*it)[0] == ' ', it->length()) << " = " << a << " "; err(++it, args...);}
#define int long long

const int N = 1e5;
const int k = 22;
int dep[N];
int par[N][k];
vector<int> g[N];

void dfs(int x, int p = -1, int d = 0){
    dep[x] = d;
    for(int i=1;i<k;i++) par[x][i] = par[par[x][i-1]][i-1];
    for(auto y: g[x]){
        if(p != y){
            par[y][0] = x;
            dfs(y,x,d+1);
        }
    }
}

int get_lca(int x, int y){
    if(dep[x] > dep[y])swap(x,y);
    for(int i=k-1;i>=0 and x != y ;i--) if(dep[par[y][i]] >= dep[x]) y = par[y][i];
    if(x == y)return x;
    for(int i=k-1;i>=0;i--){
        if(par[x][i] != par[y][i]){
            x = par[x][i];
            y = par[y][i];
        }
    }
    return par[x][0];
}

int cs = 1;
 
signed solve(){

    int n;
    cin>>n;

    for(int i=1;i<n;i++){
        int x,y;cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    par[1][0] = 1;
    dfs(1);

    int q;
    cin>>q;

    int x,y;
    while(q--){
        cin>>x>>y;
        cout<<get_lca(x,y)<<endl;
    }

    return 0;
}
signed main(){
    ios::sync_with_stdio(false);cin.tie(0);int test = 1;
    // cin>>test;
    while (test--)solve();return 0;
}
