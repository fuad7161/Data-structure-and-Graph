#include<bits/stdc++.h>
using namespace std;

const int N = 1e5+5;
vector<int>g[N];
int vis[N],low[N] , in[N];
map<int,int>mp;
int time1 = 0;
void dfs(int node, int p){
    vis[node] = 1;
    low[node] = in[node] = time1;
    time1++;
    int child = 0;
    for(auto u: g[node]){
        if(u == p)continue;
        if(vis[u]){
            low[node] = min(low[node] , in[u]);
        }else{
            dfs(u,node);
            if(low[u] >= in[node] and p != -1){
                mp[node]=1;
            }
            low[node] = min(low[node] , low[u]);
            child++;
        }
    }
    if(p == -1 and child > 1){
        mp[node] = 1;
    }
}

int main(){
    cin.tie(0);ios::sync_with_stdio(false);

    int n,m;
    cin>>n>>m;

    int x,y;
    for(int i=0;i<m;i++){
        cin>>x>>y;
        g[x].push_back(y);
        g[y].push_back(x);
    }

    for(int i=0;i<=n;i++){
        if(vis[i] == 0)dfs(i,-1);
    }

    int q , u;
    cin>>q;
    while(q--){
        cin>>u;
        if(mp[u] == 1){
            cout<<"node is articulation points"<<endl;
        }else{
            cout<<"edge is not articulation points"<<endl;
        }
    }

    return 0;
}
